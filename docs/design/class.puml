@startuml

title Class Diagram

interface ConsoleApp {
  + {abstract} setup(int argc, const char ** argv) : void
  + {abstract} is_ready(void) const : bool
  + {abstract} run() : void
  + {abstract} succeeded(void) const : bool
}
hide ConsoleApp fields

abstract class AbstractConsoleApp {
  - isReady: bool
  --
  - do_run(): void
  - do_succeeded(void) const: bool
  - register_args_to(ArgsParser & argsParser) const: void
  - admits(const Arguments & arguments) const: bool
  - setup_with(const Arguments & arguments): void
}

AbstractConsoleApp ..> ConsoleApp
AbstractConsoleApp --> ArgsParser: uses
AbstractConsoleApp --> Arguments: uses

class ArgsParser {
  - boolean_opt_names: std::map<std::string, std::string>
  - integer_opt_names: std::map<std::string, std::string>
  - string_opt_names: std::map<std::string, std::string>
  --
  + is_boolean_spec(const char * spec): bool
  + is_integer_spec(const char * spec): bool
  + is_string_spec(const char * spec): bool
  + register_boolean(const char * specifier, const char * option_name): void
  + register_integer(const char * specifier, const char * option_name): void
  + register_string(const char * specifier, const char * option_name): void
  + parse(Arguments & arguments, int argc, const char ** argv): int
}

ArgsParser --> Arguments: parses

class Arguments {
  - booleans: std::set<std::string>
  - single_integers: std::map<std::string, int>
  - single_strings: std::map<std::string, std::string>
  --
  + put_boolean(const char * option_name): void
  + is_enabled(const char * option_name) const: bool
  + put_integer(const char * option_name, int value): void
  + has_integer(const char * option_name) const: bool
  + get_integer(const char * option_name) const: int
  + put_string(const char * option_name, const std::string & value): void
  + has_string(const char * option_name) const: bool
  + std::string & get_string(const char * option_name) const: const
}

class ConsoleAppMain {
  + run(int argc, const char ** argv): int
}
hide ConsoleAppMain fields

ConsoleAppMain "-consoleApp" -- "1" ConsoleApp

class ExtraceConsoleApp {
}
hide ExtraceConsoleApp methods
hide ExtraceConsoleApp fields

ExtraceConsoleApp --|> AbstractConsoleApp

class ExtraceConsoleAppBuilder {
  + build(void) const: ExtraceConsoleApp * 
}
hide ExtraceConsoleAppBuilder fields

ExtraceConsoleAppBuilder --> ExtraceConsoleApp: builds

@enduml